" Do not run defaults vim, that can enable mouse mode and other stuff
"
" Defaults:
" - /usr/share/vim/vim80/defaults.vim (debian)
let g:skip_defaults_vim=1

runtime! debian.vim
runtime! archlinux.vim

set rtp+=/etc/vim/bundle/vundle/
call vundle#rc()

" Load vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

"
" Plugins
"
function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --system-boost --system-libclang --clang-completer
  endif
endfunction

" for YouCompleteMe
let g:plug_timeout=600

call plug#begin('~/.vim/bundle')
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'scrooloose/syntastic'
Plug 'junegunn/fzf.vim'
Plug 'sunaku/vim-shortcut'
Plug 'szw/vim-tags'
Plug 'vim-scripts/taglist.vim'
Plug 'ciaranm/detectindent'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'elzr/vim-json'
Plug 'svermeulen/vim-easyclip'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
" TODO: replace with https://github.com/llvm-mirror/lldb/tree/master/utils/vim-lldb
"Plug 'vim-lldb'
call plug#end()

"
" basic
"
set tags=tags;/
set mouse=
set autowrite
set autochdir
set number
set hidden
set termencoding=utf-8
set fileencodings=utf8,cp1251
set encoding=utf8
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЖ;ABCDEFGHIJKLMNOPQRSTUVWXYZ:,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
set tw=0
set hlsearch
set incsearch
set fileformat=unix
set wildmenu
set wcm=<Tab>
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif
syntax enable
colorscheme desert

exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list

" Make the 81st column stand out
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" Status line
" https://groups.google.com/forum/#!topic/vim_use/wPnsi-40FhE
set laststatus=2
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4c\ %*             "column number
set statusline +=%2*0x%04B\ %*          "character under cursor
" vim-fugitive
set statusline +=\ %{substitute(fugitive#statusline(),'^.Git.\\(.*\\)..$','\\1','')}


" ignores
set wildignore+=*/.git/**,*/.hg/**,*/.svn/**,*/.cmake**
set wildignore+=*/build/**,*/__pycache__/**,*/.egg-info/**
set wildignore+=*.exe,*.so,*.dll,*.a,*.o
set wildignore+=*.la,*.lo,*.pc,*.in
set wildignore+=*.sw[poa]
set wildignore+=*.zip,*.rar,*.tgz,*.gz,*.tar,*.zst,*.bgz
set wildignore+=*.pyc,*.whl

" no backup needed
set nobackup
set nowb
set noswapfile
" Open any file with a pre-existing swapfile in readonly mode
augroup NoSimultaneousEdits
    autocmd!
    autocmd SwapExists * let v:swapchoice = 'o'
    autocmd SwapExists * echoerr 'Duplicate edit session (readonly)'
augroup END

" fold
autocmd FileType c setlocal foldmethod=syntax
autocmd FileType cpp setlocal foldmethod=syntax
autocmd FileType h setlocal foldmethod=syntax
autocmd FileType json setlocal foldmethod=syntax
set foldenable!
set foldlevel=1000
hi Folded ctermbg=5 " color scheme dark reset can't handle folded info

"
" YouCompleteMe
"
let g:ycm_global_ycm_extra_conf = '/etc/vim/ycm_extra_conf.py'


"
" fzf
"

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
noremap <Leader>g :GGrep<CR>

"
" vim-shortcut
"
runtime plugin/shortcut.vim

" vim-shortcut bindings
Shortcut show shortcut menu and run chosen shortcut
  \ noremap <silent> <Leader><Leader> :Shortcuts<CR>
Shortcut fallback to shortcut menu on partial entry
  \ noremap <silent> <Leader> :Shortcuts<CR>
" fzf bindings
Shortcut Fuzzy search in files
  \ noremap <C-P> :GFiles<CR>
Shortcut Fuzzy search in buffers
  \ noremap <leader>b :Buffers<CR>
Shortcut Fuzzy search in history
  \ noremap <leader>h :History<CR>
Shortcut Fuzzy search in commits (current buffer)
  \ noremap <leader>c :BCommits<CR>
Shortcut Fuzzy search in commits
  \ noremap <leader>C :Commits<CR>
Shortcut Fuzzy search in tags (current buffer)
  \ noremap <leader>t :BTags<CR>
Shortcut Fuzzy search in tags
  \ noremap <leader>T :Tags<CR>
Shortcut Fuzzy search in lines (current buffer)
  \ noremap <leader>l :BLines<CR>
Shortcut Fuzzy search in lines
  \ noremap <leader>L :Lines<CR>
Shortcut Fuzzy search in marks
  \ noremap <Leader>' :Marks<CR>

Shortcut Explorer noremap <Leader>E :Ex<CR>
Shortcut Save buffer (force) noremap <Leader>w :w!<CR>
Shortcut Quit noremap <leader>q :q<CR>
Shortcut Explorer noremap <Leader>E :Ex<CR>
Shortcut Open new tab noremap <Leader>N :tagnew<CR>
Shortcut Show YouCompleteMe FixIt noremap <Leader>F :YcmCompleter FixIt<CR>
Shortcut Toggler show numbers noremap <Leader>n :set number!<CR>
Shortcut Toggler tag/space mode (current buffer)
  \ noremap <Leader>s :setl noexpandtab! <BAR> setl shiftwidth=4 <BAR> setl tabstop=4 <BAR> setl softtabstop=4<CR>

for i in range(1,9)
  execute 'Shortcut go to tab number '. i .' '
        \ 'noremap <silent> <Leader>'. i .' :tabfirst<Bar>'. i .'tabnext<CR>'
endfor

" vim-tags
Shortcut! :TagsGenerate<CR> Generate tags
Shortcut! :TagsGenerate!<CR> Generate tags (force)

" taglist.vim
Shortcut! :TlistToggle<CR> Toggle tags (current buffer)

" vim-fugitive
Shortcut! :Gblame<CR>           git blame
Shortcut! :Gstatus<CR>          git status
Shortcut! :Gdiff<CR>            git diff
Shortcut! :Gcommit<CR>          git commit
Shortcut! :Gcommit --ammend<CR> git commit ammend
Shortcut! :Gread<CR>            git checkout: revert buffer to repository
Shortcut! :Gread!<CR>           git checkout: revert buffer to repository (force)
Shortcut! :Gwrite<CR>           git add: stage all changes in buffer
Shortcut! :Gwrite!<CR>          git add: stage all changes in buffer (force)
Shortcut! :Gremove<CR>          git rm: delete file from repository
Shortcut! :Gremove!<CR>          git rm: delete file from repository (force)
Shortcut! :Gedit<CR>            return to editing git buffer

" Plug
Shortcut! :PlugUpdate<CR> Update plugins
Shortcut! :PlugUpdate!<CR> Update plugins (force)
Shortcut! :PlugStatus<CR> Plugins status

set pastetoggle=<leader>p

"
" detectindent
"
let g:detectindent_preferred_indent=4
let g:detectindent_max_lines_to_analyse=1024
let g:is_bash=1

"
" filetype plugin
"
filetype plugin on
filetype plugin indent on
autocmd BufEnter    * if &filetype == "" | setlocal ft=sh | endif
autocmd BufReadPost * :DetectIndent

"
" bindings (other shortcut)
"
noremap  <F1> :setlocal spell!<CR>
inoremap <F1> <C-\><C-O>:setlocal spell!<CR>

nnoremap <C-a> <nop>
nnoremap <C-x> <nop>

" < & > - indent
vmap < <gv
vmap > >gv

" mapping window moving
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" tab movements
map <C-left> :tabprev<CR>
map <C-right> :tabnext<CR>

" toggle *pointer*
noremap  <C-C>  :set cursorline! <BAR> set cursorcolumn!<CR>
inoremap <C-C>  <C-O>:set cursorline! <BAR> set cursorcolumn!<CR>

